/*
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package splitit

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// LoginApi service interface
type LoginApiService interface {
	LoginGet(ctx _context.Context, localVarOptionals *LoginGetOpts) (LoginResponse, *_nethttp.Response, error)
	LoginPost(ctx _context.Context, request LoginRequest) (LoginResponse, *_nethttp.Response, error)
}

// LoginApi service implementation
type implLoginApiService struct {
	*APIClient
}


// LoginGetOpts Optional parameters for the method 'LoginGet'
type LoginGetOpts struct {
    UserName optional.String
    Password optional.String
}

/*
LoginGet Method for LoginGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *LoginGetOpts - Optional Parameters:
 * @param "UserName" (optional.String) - 
 * @param "Password" (optional.String) - 
@return LoginResponse
*/
func (a implLoginApiService) LoginGet(ctx _context.Context, localVarOptionals *LoginGetOpts) (LoginResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LoginResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/Login"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserName.IsSet() {
		localVarQueryParams.Add("UserName", parameterToString(localVarOptionals.UserName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Password.IsSet() {
		localVarQueryParams.Add("Password", parameterToString(localVarOptionals.Password.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v LoginResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.LoginGet(ctx , localVarOptionals)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
LoginPost Method for LoginPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return LoginResponse
*/
func (a implLoginApiService) LoginPost(ctx _context.Context, request LoginRequest) (LoginResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LoginResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/Login"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*LoginRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		LoginRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v LoginResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.LoginPost(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
