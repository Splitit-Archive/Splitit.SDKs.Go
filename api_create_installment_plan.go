/*
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package splitit

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// CreateInstallmentPlanApiService CreateInstallmentPlanApi service
type CreateInstallmentPlanApiService service

// CreateInstallmentPlanGetOpts Optional parameters for the method 'CreateInstallmentPlanGet'
type CreateInstallmentPlanGetOpts struct {
    AmountBeforeFees optional.Float32
    ApiKey optional.String
    AvsAddress optional.String
    AvsZip optional.String
    CardCvv optional.String
    CardExpMonth optional.String
    CardExpYear optional.String
    CardHolder optional.String
    CardNumber optional.String
    CardTypeId optional.Int32
    ConsumerFullName optional.String
    CountryId optional.Int32
    Email optional.String
    InstallmentNumber optional.Int32
    ParamX optional.String
    SessionId optional.String
}

/*
CreateInstallmentPlanGet Method for CreateInstallmentPlanGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CreateInstallmentPlanGetOpts - Optional Parameters:
 * @param "AmountBeforeFees" (optional.Float32) - 
 * @param "ApiKey" (optional.String) - 
 * @param "AvsAddress" (optional.String) - 
 * @param "AvsZip" (optional.String) - 
 * @param "CardCvv" (optional.String) - 
 * @param "CardExpMonth" (optional.String) - 
 * @param "CardExpYear" (optional.String) - 
 * @param "CardHolder" (optional.String) - 
 * @param "CardNumber" (optional.String) - 
 * @param "CardTypeId" (optional.Int32) - 
 * @param "ConsumerFullName" (optional.String) - 
 * @param "CountryId" (optional.Int32) - 
 * @param "Email" (optional.String) - 
 * @param "InstallmentNumber" (optional.Int32) - 
 * @param "ParamX" (optional.String) - 
 * @param "SessionId" (optional.String) - 
@return CreateInstallmentPlanLegacyResponse
*/
func (a *CreateInstallmentPlanApiService) CreateInstallmentPlanGet(ctx _context.Context, localVarOptionals *CreateInstallmentPlanGetOpts) (CreateInstallmentPlanLegacyResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateInstallmentPlanLegacyResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/CreateInstallmentPlan"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.AmountBeforeFees.IsSet() {
		localVarQueryParams.Add("AmountBeforeFees", parameterToString(localVarOptionals.AmountBeforeFees.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApiKey.IsSet() {
		localVarQueryParams.Add("ApiKey", parameterToString(localVarOptionals.ApiKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AvsAddress.IsSet() {
		localVarQueryParams.Add("AvsAddress", parameterToString(localVarOptionals.AvsAddress.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AvsZip.IsSet() {
		localVarQueryParams.Add("AvsZip", parameterToString(localVarOptionals.AvsZip.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardCvv.IsSet() {
		localVarQueryParams.Add("CardCvv", parameterToString(localVarOptionals.CardCvv.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardExpMonth.IsSet() {
		localVarQueryParams.Add("CardExpMonth", parameterToString(localVarOptionals.CardExpMonth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardExpYear.IsSet() {
		localVarQueryParams.Add("CardExpYear", parameterToString(localVarOptionals.CardExpYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardHolder.IsSet() {
		localVarQueryParams.Add("CardHolder", parameterToString(localVarOptionals.CardHolder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardNumber.IsSet() {
		localVarQueryParams.Add("CardNumber", parameterToString(localVarOptionals.CardNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CardTypeId.IsSet() {
		localVarQueryParams.Add("CardTypeId", parameterToString(localVarOptionals.CardTypeId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConsumerFullName.IsSet() {
		localVarQueryParams.Add("ConsumerFullName", parameterToString(localVarOptionals.ConsumerFullName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CountryId.IsSet() {
		localVarQueryParams.Add("CountryId", parameterToString(localVarOptionals.CountryId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarQueryParams.Add("Email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InstallmentNumber.IsSet() {
		localVarQueryParams.Add("InstallmentNumber", parameterToString(localVarOptionals.InstallmentNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParamX.IsSet() {
		localVarQueryParams.Add("ParamX", parameterToString(localVarOptionals.ParamX.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SessionId.IsSet() {
		localVarQueryParams.Add("SessionId", parameterToString(localVarOptionals.SessionId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CreateInstallmentPlanLegacyResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(*localVarReturnValue.ResponseHeader.Errors) > 0 {
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: (*localVarReturnValue.ResponseHeader.Errors)[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
