/*
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package splitit

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// InstallmentPlanApi service interface
type InstallmentPlanApiService interface {
	InstallmentPlanApprove(ctx _context.Context, request ApproveInstallmentPlanRequest) (InstallmentPlanResponse, *_nethttp.Response, error)
	InstallmentPlanCancel(ctx _context.Context, request CancelInstallmentPlanRequest) (InstallmentPlanResponse, *_nethttp.Response, error)
	InstallmentPlanChargeBack(ctx _context.Context, request ChargebackRequest) (InstallmentPlanResponse, *_nethttp.Response, error)
	InstallmentPlanCreate(ctx _context.Context, request CreateInstallmentPlanRequest) (CreateInstallmentsPlanResponse, *_nethttp.Response, error)
	InstallmentPlanGet(ctx _context.Context, request GetInstallmentsPlanSearchCriteriaRequest) (GetInstallmentsPlanResponse, *_nethttp.Response, error)
	InstallmentPlanGet3DSecureParameters(ctx _context.Context, request Get3DSecureParametersRequest) (Get3DSecureParametersResponse, *_nethttp.Response, error)
	InstallmentPlanGetExtended(ctx _context.Context, request GetInstallmentsPlanSearchCriteriaRequest) (GetInstallmentsPlanExtendedResponse, *_nethttp.Response, error)
	InstallmentPlanGetFraudStatusDisplay(ctx _context.Context, request GetFraudStatusDisplayRequest) (GetFraudStatusDisplayResponse, *_nethttp.Response, error)
	InstallmentPlanGetInitiatedInstallmentPlanRequest(ctx _context.Context, request GetInitiatedInstallmentPlanRequest) (GetInitiatedInstallmentPlanResponse, *_nethttp.Response, error)
	InstallmentPlanGetInitiatedUpdatePaymentData(ctx _context.Context) (GetInitiatedUpdatePaymentDataResponse, *_nethttp.Response, error)
	InstallmentPlanGetLearnMoreDetails(ctx _context.Context, request LearnMoreDetailsRequest) (LearnMoreDetailsResponse, *_nethttp.Response, error)
	InstallmentPlanGetPGTL(ctx _context.Context, request GetPgtlRequest) (GetPgtlResponse, *_nethttp.Response, error)
	InstallmentPlanGetSchedules(ctx _context.Context, request GetInstallmentSchedulesRequest) (GetInstallmentsScheduleResponse, *_nethttp.Response, error)
	InstallmentPlanInitiate(ctx _context.Context, request InitiateInstallmentPlanRequest) (InitiateInstallmentsPlanResponse, *_nethttp.Response, error)
	InstallmentPlanRefund(ctx _context.Context, request RefundPlanRequest) (RefundInstallmentPlanResponse, *_nethttp.Response, error)
	InstallmentPlanRequestPayment(ctx _context.Context, request RequestPaymentRequest) (RequestPaymentResponse, *_nethttp.Response, error)
	InstallmentPlanStartInstallments(ctx _context.Context, request StartInstallmentsRequest) (InstallmentPlanResponse, *_nethttp.Response, error)
	InstallmentPlanTermsAndConditions(ctx _context.Context, request TermsAndConditionsGetRequest) (TermsAndConditionsGetResponse, *_nethttp.Response, error)
	InstallmentPlanTestCard(ctx _context.Context, request TestCardRequest) (InstallmentPlanResponse, *_nethttp.Response, error)
	InstallmentPlanUpdate(ctx _context.Context, request UpdateInstallmentPlanRequest) (UpdateInstallmentsPlanResponse, *_nethttp.Response, error)
	InstallmentPlanVerifyPayment(ctx _context.Context, request VerifyPaymentRequest) (VerifyPaymentResponse, *_nethttp.Response, error)
}

// InstallmentPlanApi service implementation
type implInstallmentPlanApiService struct {
	*APIClient
}




/*
InstallmentPlanApprove Method for InstallmentPlanApprove
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return InstallmentPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanApprove(ctx _context.Context, request ApproveInstallmentPlanRequest) (InstallmentPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InstallmentPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Approve"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*ApproveInstallmentPlanRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		ApproveInstallmentPlanRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v InstallmentPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanApprove(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanCancel Method for InstallmentPlanCancel
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return InstallmentPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanCancel(ctx _context.Context, request CancelInstallmentPlanRequest) (InstallmentPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InstallmentPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Cancel"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*CancelInstallmentPlanRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		CancelInstallmentPlanRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v InstallmentPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanCancel(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanChargeBack Method for InstallmentPlanChargeBack
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return InstallmentPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanChargeBack(ctx _context.Context, request ChargebackRequest) (InstallmentPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InstallmentPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/ChargeBack"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*ChargebackRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		ChargebackRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v InstallmentPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanChargeBack(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanCreate Method for InstallmentPlanCreate
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return CreateInstallmentsPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanCreate(ctx _context.Context, request CreateInstallmentPlanRequest) (CreateInstallmentsPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateInstallmentsPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Create"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*CreateInstallmentPlanRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		CreateInstallmentPlanRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v CreateInstallmentsPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanCreate(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGet Method for InstallmentPlanGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return GetInstallmentsPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGet(ctx _context.Context, request GetInstallmentsPlanSearchCriteriaRequest) (GetInstallmentsPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetInstallmentsPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Get"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*GetInstallmentsPlanSearchCriteriaRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		GetInstallmentsPlanSearchCriteriaRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetInstallmentsPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGet(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGet3DSecureParameters Method for InstallmentPlanGet3DSecureParameters
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return Get3DSecureParametersResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGet3DSecureParameters(ctx _context.Context, request Get3DSecureParametersRequest) (Get3DSecureParametersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Get3DSecureParametersResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Get3DSecureParameters"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*Get3DSecureParametersRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		Get3DSecureParametersRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v Get3DSecureParametersResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGet3DSecureParameters(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGetExtended Method for InstallmentPlanGetExtended
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return GetInstallmentsPlanExtendedResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGetExtended(ctx _context.Context, request GetInstallmentsPlanSearchCriteriaRequest) (GetInstallmentsPlanExtendedResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetInstallmentsPlanExtendedResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/GetExtended"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*GetInstallmentsPlanSearchCriteriaRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		GetInstallmentsPlanSearchCriteriaRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetInstallmentsPlanExtendedResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGetExtended(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGetFraudStatusDisplay Method for InstallmentPlanGetFraudStatusDisplay
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return GetFraudStatusDisplayResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGetFraudStatusDisplay(ctx _context.Context, request GetFraudStatusDisplayRequest) (GetFraudStatusDisplayResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetFraudStatusDisplayResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/GetFraudStatusDisplay"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*GetFraudStatusDisplayRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		GetFraudStatusDisplayRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetFraudStatusDisplayResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGetFraudStatusDisplay(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGetInitiatedInstallmentPlanRequest Method for InstallmentPlanGetInitiatedInstallmentPlanRequest
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return GetInitiatedInstallmentPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGetInitiatedInstallmentPlanRequest(ctx _context.Context, request GetInitiatedInstallmentPlanRequest) (GetInitiatedInstallmentPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetInitiatedInstallmentPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/GetInitiatedInstallmentPlanRequest"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*GetInitiatedInstallmentPlanRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		GetInitiatedInstallmentPlanRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetInitiatedInstallmentPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGetInitiatedInstallmentPlanRequest(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGetInitiatedUpdatePaymentData Method for InstallmentPlanGetInitiatedUpdatePaymentData
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return GetInitiatedUpdatePaymentDataResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGetInitiatedUpdatePaymentData(ctx _context.Context) (GetInitiatedUpdatePaymentDataResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetInitiatedUpdatePaymentDataResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/GetInitiatedUpdatePaymentData"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetInitiatedUpdatePaymentDataResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGetInitiatedUpdatePaymentData(ctx )
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGetLearnMoreDetails Method for InstallmentPlanGetLearnMoreDetails
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return LearnMoreDetailsResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGetLearnMoreDetails(ctx _context.Context, request LearnMoreDetailsRequest) (LearnMoreDetailsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LearnMoreDetailsResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/GetLearnMoreDetails"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*LearnMoreDetailsRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		LearnMoreDetailsRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v LearnMoreDetailsResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGetLearnMoreDetails(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGetPGTL Method for InstallmentPlanGetPGTL
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return GetPgtlResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGetPGTL(ctx _context.Context, request GetPgtlRequest) (GetPgtlResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetPgtlResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/GetPGTL"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*GetPgtlRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		GetPgtlRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetPgtlResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGetPGTL(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanGetSchedules Method for InstallmentPlanGetSchedules
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return GetInstallmentsScheduleResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanGetSchedules(ctx _context.Context, request GetInstallmentSchedulesRequest) (GetInstallmentsScheduleResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetInstallmentsScheduleResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/GetSchedules"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*GetInstallmentSchedulesRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		GetInstallmentSchedulesRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetInstallmentsScheduleResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanGetSchedules(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanInitiate Method for InstallmentPlanInitiate
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return InitiateInstallmentsPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanInitiate(ctx _context.Context, request InitiateInstallmentPlanRequest) (InitiateInstallmentsPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InitiateInstallmentsPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Initiate"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*InitiateInstallmentPlanRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		InitiateInstallmentPlanRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v InitiateInstallmentsPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanInitiate(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanRefund Method for InstallmentPlanRefund
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return RefundInstallmentPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanRefund(ctx _context.Context, request RefundPlanRequest) (RefundInstallmentPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RefundInstallmentPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Refund"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*RefundPlanRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		RefundPlanRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v RefundInstallmentPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanRefund(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanRequestPayment Method for InstallmentPlanRequestPayment
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return RequestPaymentResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanRequestPayment(ctx _context.Context, request RequestPaymentRequest) (RequestPaymentResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RequestPaymentResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/RequestPayment"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*RequestPaymentRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		RequestPaymentRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v RequestPaymentResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanRequestPayment(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanStartInstallments Method for InstallmentPlanStartInstallments
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return InstallmentPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanStartInstallments(ctx _context.Context, request StartInstallmentsRequest) (InstallmentPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InstallmentPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/StartInstallments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*StartInstallmentsRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		StartInstallmentsRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v InstallmentPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanStartInstallments(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanTermsAndConditions Method for InstallmentPlanTermsAndConditions
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return TermsAndConditionsGetResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanTermsAndConditions(ctx _context.Context, request TermsAndConditionsGetRequest) (TermsAndConditionsGetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TermsAndConditionsGetResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/TermsAndConditions"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*TermsAndConditionsGetRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		TermsAndConditionsGetRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TermsAndConditionsGetResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanTermsAndConditions(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanTestCard Method for InstallmentPlanTestCard
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return InstallmentPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanTestCard(ctx _context.Context, request TestCardRequest) (InstallmentPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InstallmentPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/TestCard"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*TestCardRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		TestCardRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v InstallmentPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanTestCard(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanUpdate Method for InstallmentPlanUpdate
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return UpdateInstallmentsPlanResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanUpdate(ctx _context.Context, request UpdateInstallmentPlanRequest) (UpdateInstallmentsPlanResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdateInstallmentsPlanResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Update"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*UpdateInstallmentPlanRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		UpdateInstallmentPlanRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v UpdateInstallmentsPlanResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanUpdate(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}



/*
InstallmentPlanVerifyPayment Method for InstallmentPlanVerifyPayment
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param request
@return VerifyPaymentResponse
*/
func (a implInstallmentPlanApiService) InstallmentPlanVerifyPayment(ctx _context.Context, request VerifyPaymentRequest) (VerifyPaymentResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VerifyPaymentResponse
	)

	// create path and map variables
	localVarPath := a.cfg.BasePath + "/api/InstallmentPlan/Get/VerifyPayment"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	var apiKey string
	if ctx.Value(noApiKeyCtxKey{}) == nil {
		apiKey = a.cfg.ApiKey
	}

	sessID, err := a.GetSessionID(ctx)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	culture, cultureFound := ctx.Value(cultureCtxKey{}).(string)
	if !cultureFound {
		culture = a.cfg.defaultCulture
	}

	localVarPostBody = &struct {
		*VerifyPaymentRequest
		RequestHeader RequestHeader `json:"RequestHeader,omitempty"`
	}{
		VerifyPaymentRequest: &request,
		RequestHeader: RequestHeader{
			ApiKey:      apiKey,
			CultureName: culture,
			SessionId:   sessID,
			TouchPoint:  a.cfg.TouchPoint,
		},
	}

	r, err := a.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v VerifyPaymentResponse
			err = a.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	if localVarReturnValue.ResponseHeader.Succeeded != true {
		if len(localVarReturnValue.ResponseHeader.Errors) > 0 {
			for _, apiErr := range localVarReturnValue.ResponseHeader.Errors {
				if apiErr.ErrorCode != "704" {
					continue
				}
				if ctx.Value("splitit.isRetry") != nil {
					break
				}
				a.InvalidateSessionID()
				ctx = _context.WithValue(ctx, "splitit.isRetry", struct{}{})
				return a.InstallmentPlanVerifyPayment(ctx , request)
			}
			newErr := GenericOpenAPIError{
				body:  localVarBody,
				error: localVarReturnValue.ResponseHeader.Errors[0].Message,
				model: localVarReturnValue.ResponseHeader,
			}
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: "Error ocurred while contacting Splitit API.",
			model: localVarReturnValue.ResponseHeader,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
